<Window x:Class="Hourglass.Windows.TimerWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:local="clr-namespace:Hourglass.Windows"
        Title="Hourglass" Width="350" Height="150" MinWidth="250" MinHeight="150"
        Loaded="WindowLoaded" StateChanged="WindowStateChanged" Closing="WindowClosing"
        MouseDown="WindowMouseDown" MouseDoubleClick="WindowMouseDoubleClick">
    <Window.CommandBindings>
        <CommandBinding Command="local:TimerWindow.StartCommand" Executed="StartCommandExecuted"/>
        <CommandBinding Command="local:TimerWindow.PauseCommand" Executed="PauseCommandExecuted"/>
        <CommandBinding Command="local:TimerWindow.ResumeCommand" Executed="ResumeCommandExecuted"/>
        <CommandBinding Command="local:TimerWindow.PauseResumeCommand" Executed="PauseResumeCommandExecuted"/>
        <CommandBinding Command="local:TimerWindow.StopCommand" Executed="StopCommandExecuted"/>
        <CommandBinding Command="local:TimerWindow.ResetCommand" Executed="ResetCommandExecuted"/>
        <CommandBinding Command="local:TimerWindow.CloseCommand" Executed="CloseCommandExecuted"/>
        <CommandBinding Command="local:TimerWindow.CancelCommand" Executed="CancelCommandExecuted"/>
        <CommandBinding Command="local:TimerWindow.UpdateCommand" Executed="UpdateCommandExecuted"/>
        <CommandBinding Command="local:TimerWindow.EscapeCommand" Executed="EscapeCommandExecuted"/>
        <CommandBinding Command="local:TimerWindow.FullScreenCommand" Executed="FullScreenCommandExecuted"/>
    </Window.CommandBindings>
    <Window.InputBindings>
        <KeyBinding Command="local:TimerWindow.PauseResumeCommand" Gesture="Space"/>
        <KeyBinding Command="local:TimerWindow.PauseResumeCommand" Gesture="Ctrl+P"/>
        <KeyBinding Command="local:TimerWindow.StopCommand" Gesture="Ctrl+S"/>
        <KeyBinding Command="local:TimerWindow.EscapeCommand" Gesture="Esc"/>
        <KeyBinding Command="local:TimerWindow.FullScreenCommand" Gesture="Alt+Enter"/>
    </Window.InputBindings>
    <Window.Resources>
        <Style TargetType="{x:Type ProgressBar}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ProgressBar}">
                        <Grid>
                            <Border Name="PART_Track" Background="#EEEEEE"/>
                            <Border Name="PART_Indicator" Background="{TemplateBinding Foreground}" HorizontalAlignment="Left"/>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="TitleTextBoxStyle" TargetType="TextBox">
            <Style.Triggers>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding ElementName=TitleTextBox, Path=IsFocused}" Value="False"/>
                        <Condition Binding="{Binding ElementName=TimerTextBox, Path=IsFocused}" Value="False"/>
                        <Condition Binding="{Binding ElementName=StartButton, Path=IsFocused}" Value="False"/>
                        <Condition Binding="{Binding ElementName=PauseButton, Path=IsFocused}" Value="False"/>
                        <Condition Binding="{Binding ElementName=ResumeButton, Path=IsFocused}" Value="False"/>
                        <Condition Binding="{Binding ElementName=StopButton, Path=IsFocused}" Value="False"/>
                        <Condition Binding="{Binding ElementName=ResetButton, Path=IsFocused}" Value="False"/>
                        <Condition Binding="{Binding ElementName=CloseButton, Path=IsFocused}" Value="False"/>
                        <Condition Binding="{Binding ElementName=CancelButton, Path=IsFocused}" Value="False"/>
                        <Condition Binding="{Binding ElementName=UpdateButton, Path=IsFocused}" Value="False"/>
                        <Condition Binding="{Binding ElementName=InnerGrid, Path=IsMouseOver}" Value="False"/>
                        <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType=local:TimerWindow}, Path=ContextMenu.IsOpen}" Value="False"/>
                        <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType=local:TimerWindow}, Path=Timer.State}" Value="Running"/>
                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text}" Value=""/>
                    </MultiDataTrigger.Conditions>
                    <MultiDataTrigger.EnterActions>
                        <BeginStoryboard>
                            <Storyboard>
                                <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0.0" Duration="0:0:0.3">
                                    <DoubleAnimation.EasingFunction>
                                        <ExponentialEase EasingMode="EaseOut"/>
                                    </DoubleAnimation.EasingFunction>
                                </DoubleAnimation>
                            </Storyboard>
                        </BeginStoryboard>
                    </MultiDataTrigger.EnterActions>
                    <MultiDataTrigger.ExitActions>
                        <BeginStoryboard>
                            <Storyboard>
                                <DoubleAnimation Storyboard.TargetProperty="Opacity" To="1.0" Duration="0:0:0.3">
                                    <DoubleAnimation.EasingFunction>
                                        <ExponentialEase EasingMode="EaseOut"/>
                                    </DoubleAnimation.EasingFunction>
                                </DoubleAnimation>
                            </Storyboard>
                        </BeginStoryboard>
                    </MultiDataTrigger.ExitActions>
                </MultiDataTrigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="ButtonPanelStyle" TargetType="StackPanel">
            <Style.Triggers>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding ElementName=TitleTextBox, Path=IsFocused}" Value="False"/>
                        <Condition Binding="{Binding ElementName=TimerTextBox, Path=IsFocused}" Value="False"/>
                        <Condition Binding="{Binding ElementName=StartButton, Path=IsFocused}" Value="False"/>
                        <Condition Binding="{Binding ElementName=PauseButton, Path=IsFocused}" Value="False"/>
                        <Condition Binding="{Binding ElementName=ResumeButton, Path=IsFocused}" Value="False"/>
                        <Condition Binding="{Binding ElementName=StopButton, Path=IsFocused}" Value="False"/>
                        <Condition Binding="{Binding ElementName=ResetButton, Path=IsFocused}" Value="False"/>
                        <Condition Binding="{Binding ElementName=CloseButton, Path=IsFocused}" Value="False"/>
                        <Condition Binding="{Binding ElementName=CancelButton, Path=IsFocused}" Value="False"/>
                        <Condition Binding="{Binding ElementName=UpdateButton, Path=IsFocused}" Value="False"/>
                        <Condition Binding="{Binding ElementName=InnerGrid, Path=IsMouseOver}" Value="False"/>
                        <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType=local:TimerWindow}, Path=ContextMenu.IsOpen}" Value="False"/>
                        <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType=local:TimerWindow}, Path=Timer.State}" Value="Running"/>
                    </MultiDataTrigger.Conditions>
                    <MultiDataTrigger.EnterActions>
                        <BeginStoryboard>
                            <Storyboard>
                                <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0.0" Duration="0:0:0.3">
                                    <DoubleAnimation.EasingFunction>
                                        <ExponentialEase EasingMode="EaseOut"/>
                                    </DoubleAnimation.EasingFunction>
                                </DoubleAnimation>
                            </Storyboard>
                        </BeginStoryboard>
                    </MultiDataTrigger.EnterActions>
                    <MultiDataTrigger.ExitActions>
                        <BeginStoryboard>
                            <Storyboard>
                                <DoubleAnimation Storyboard.TargetProperty="Opacity" To="1.0" Duration="0:0:0.3">
                                    <DoubleAnimation.EasingFunction>
                                        <ExponentialEase EasingMode="EaseOut"/>
                                    </DoubleAnimation.EasingFunction>
                                </DoubleAnimation>
                            </Storyboard>
                        </BeginStoryboard>
                    </MultiDataTrigger.ExitActions>
                </MultiDataTrigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="{x:Type Button}">
            <Setter Property="Foreground" Value="#0066CC"/>
            <Setter Property="FontFamily" Value="Segoe UI"/>
            <Setter Property="Margin" Value="7 0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <TextBlock>
                            <ContentPresenter RecognizesAccessKey="True"/>
                        </TextBlock>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Visibility" Value="Collapsed"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Cursor" Value="Hand"/>
                                <Setter Property="Foreground" Value="#FF0000"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>
    <Window.TaskbarItemInfo>
        <TaskbarItemInfo/>
    </Window.TaskbarItemInfo>
    <Grid x:Name="OuterGrid">
        <ProgressBar x:Name="ProgressBar"/>
        <Border x:Name="OuterNotificationBorder" Background="#C75050" IsHitTestVisible="False" Opacity="0"/>
        <Grid x:Name="InnerGrid" Background="White" Margin="10">
            <StackPanel x:Name="ControlsPanel" Margin="20 0" VerticalAlignment="Center">
                <local:SizeToFitTextBox x:Name="TitleTextBox"
                                        Background="{x:Null}"
                                        BorderBrush="{x:Null}"
                                        FontFamily="Segoe UI"
                                        Foreground="DarkGray"
                                        KeyDown="TitleTextBoxKeyDown"
                                        MaxFontSize="12"
                                        MinFontSize="8"
                                        PreviewMouseDown="TitleTextBoxPreviewMouseDown"
                                        PreviewGotKeyboardFocus="TitleTextBoxPreviewGotKeyboardFocus"
                                        Style="{StaticResource TitleTextBoxStyle}"
                                        Text="{Binding RelativeSource={RelativeSource AncestorType=local:TimerWindow}, Path=Timer.Options.Title, UpdateSourceTrigger=PropertyChanged}"
                                        TextAlignment="Center"
                                        local:Watermark.Hint="Click to enter title"/>
                <local:SizeToFitTextBox x:Name="TimerTextBox"
                                        Background="{x:Null}"
                                        BorderBrush="{x:Null}"
                                        FontFamily="Segoe UI Light, Segoe UI"
                                        Margin="0 1 0 4"
                                        MaxFontSize="18"
                                        MinFontSize="8"
                                        PreviewMouseDown="TimerTextBoxPreviewMouseDown"
                                        PreviewGotKeyboardFocus="TimerTextBoxPreviewGotKeyboardFocus"
                                        TextAlignment="Center"
                                        local:Watermark.Hint="Click to enter time or date"/>
                <StackPanel x:Name="ButtonPanel" HorizontalAlignment="Center" Orientation="Horizontal" Style="{StaticResource ButtonPanelStyle}">
                    <Button x:Name="StartButton" Content="_Start" Command="local:TimerWindow.StartCommand" IsDefault="True"/>
                    <Button x:Name="PauseButton" Content="_Pause" Command="local:TimerWindow.PauseCommand"/>
                    <Button x:Name="ResumeButton" Content="_Resume" Command="local:TimerWindow.ResumeCommand"/>
                    <Button x:Name="StopButton" Content="_Stop" Command="local:TimerWindow.StopCommand"/>
                    <Button x:Name="ResetButton" Content="_Reset" Command="local:TimerWindow.ResetCommand"/>
                    <Button x:Name="CloseButton" Content="_Close" Command="local:TimerWindow.CloseCommand"/>
                    <Button x:Name="CancelButton" Content="_Cancel" Command="local:TimerWindow.CancelCommand"/>
                    <Button x:Name="UpdateButton" Content="_Update" Command="local:TimerWindow.UpdateCommand"/>
                </StackPanel>
            </StackPanel>
        </Grid>
        <Border x:Name="InnerNotificationBorder" BorderBrush="#C75050" BorderThickness="1" IsHitTestVisible="False" Margin="15" Opacity="0"/>
    </Grid>
</Window>
